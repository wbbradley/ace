module _

type MutableValue T has
	var value T

type DataType is DataType(typename str, ctors [Ctor])

type Ctor has
	name str
	arg_types [DataType]
	
type CtorPatternValue has
	typename str
	name str
	args [Pattern]

type Pattern is {
	CtorPattern(cpv CtorPatternValue)
	CtorPatterns(patterns [CtorPatternValue])
	AllOf(t DataType)
	Nothing
}

fn pattern_from_type(t DataType) Pattern {
	match t {
        DataType(typename, ctors) {
            ctor_patterns := new [CtorPatternValue]
            for ctor in ctors {
                arg_patterns := new [Pattern]
                for arg_type in ctor.arg_types {
                    append(arg_patterns, AllOf(arg_type))
                }
                append(ctor_patterns, CtorPatternValue(typename, ctor.name, arg_patterns))
            }
            return CtorPatterns(ctor_patterns)
        }
	}
}
			
type Pair T S is Pair(lhs T, rhs S)

fn set_union(lhs Pattern, rhs Pattern) Pattern {
	# ∪ Operator for Patterns
	match Pair(lhs, rhs) {
		Pair(_, Nothing) { return lhs }
		Pair(Nothing, _) { return rhs }
		Pair(CtorPatterns(lhs), CtorPatterns(rhs)) {
			let patterns [CtorPatternValue] = copy(lhs)
			for a in rhs {
				append(patterns, a)
			}
			return CtorPatterns(patterns)
		}
		Pair(CtorPatterns(lhs), CtorPattern(rhs)) {
			let patterns [CtorPatternValue] = copy(lhs)
			append(patterns, rhs)
			return CtorPatterns(patterns)
		}
		Pair(CtorPattern(lhs), CtorPatterns(rhs)) {
			let patterns [CtorPatternValue] = copy(rhs)
			append(patterns, lhs)
			return CtorPatterns(patterns)
		}
		Pair(CtorPattern(lhs), CtorPattern(rhs)) {
			return CtorPatterns([lhs, rhs])
		}
    } else {
        panic("Unhandled set_union parameters: " + lhs + " ∪ " + rhs + "\n")
    }
	assert(false)
	return lhs
}

fn set_intersect(lhs Pattern, rhs Pattern) Pattern
	# ∩ Operator for Patterns
	match Pair(lhs, rhs)
		Pair(Nothing, _)
			return Nothing
		Pair(_, Nothing)
			return Nothing

		# Handle Ctors
		Pair(AllOf(DataType(lhs_typename, lhs_ctors)), AllOf(DataType(rhs_typename, rhs_ctors)))
			if lhs_typename == rhs_typename
				assert(len(lhs_ctors) == len(rhs_ctors))

				# No reduction in the pattern
				return lhs
			else
				panic("Type mismatch. " + lhs_typename + " != " + rhs_typename)
				return Nothing

		# Handle reduction from total domain to a subset
		Pair(AllOf(DataType(lhs_typename, _)), CtorPatterns(ctor_patterns))
			return reduce_all_datatype(lhs_typename, rhs, ctor_patterns)

		Pair(AllOf(DataType(lhs_typename, _)), CtorPattern(ctor_pattern))
			return reduce_all_datatype(lhs_typename, rhs, [ctor_pattern])

		Pair(CtorPatterns(ctor_patterns), AllOf(DataType(rhs_typename, _)))
			return reduce_all_datatype(rhs_typename, lhs, ctor_patterns)

		Pair(CtorPattern(ctor_pattern), AllOf(DataType(rhs_typename, _)))
			return reduce_all_datatype(rhs_typename, lhs, [ctor_pattern])

		Pair(CtorPatterns(lhs), CtorPatterns(rhs))
			return set_intersect(lhs, rhs)
		Pair(CtorPatterns(lhs), CtorPattern(rhs))
			return set_intersect(lhs, [rhs])
		Pair(CtorPattern(lhs), CtorPattern(rhs))
			return set_intersect([lhs], [rhs])
		else
			assert(false)
			return Nothing

fn set_intersect(lhs [CtorPatternValue], rhs [CtorPatternValue]) Pattern
	var intersect = Nothing
	for a in lhs
		intersect = set_union(foldl(set_cpv_intersect, CtorPattern(a), rhs), intersect)
	return intersect

fn set_cpv_intersect(lhs Pattern, rhs CtorPatternValue) Pattern
	match lhs
		CtorPattern(cpv)
			return set_intersect(cpv, rhs)
		else
			assert(false)
			return Nothing

fn set_intersect(lhs CtorPatternValue, rhs CtorPatternValue) Pattern
	assert(lhs.typename == rhs.typename)

	if lhs.name != rhs.name
		return Nothing

	assert(len(rhs.args) == len(lhs.args))

	reduced_args := new [Pattern]
	reserve(reduced_args, len(lhs.args))

	for i in range(len(lhs.args))
		new_arg := set_intersect(lhs.args[i], rhs.args[i])
		match new_arg
			Nothing
				return Nothing
			else
				append(reduced_args, new_arg)

	assert(len(reduced_args) == len(lhs.args))
	return CtorPattern(CtorPatternValue(lhs.typename, lhs.name, reduced_args))


fn reduce_all_datatype(lhs_typename str, rhs Pattern, ctor_patterns [CtorPatternValue]) Pattern
	for ctor_pattern in ctor_patterns
		if ctor_pattern.typename != lhs_typename
			panic("Invalid typed ctor pattern found. Expected " + lhs_typename
					+ " but ctor_pattern indicates it is a " + ctor_pattern.typename)

	# This is a reduction to the right hand side
	if len(ctor_patterns) == 1
		return CtorPattern(ctor_patterns[0])
	else
		return CtorPatterns(ctor_patterns)

[global]
fn str(ctor Ctor) str
	if len(ctor.arg_types) == 0
		return ctor.name
	return ctor.name + "(" + join(", ", ctor.arg_types) + ")"

[global]
fn str(t DataType) str
	match t
		DataType(typename, ctors)
			return typename

[global]
fn str(pattern Pattern) str
	match pattern
		CtorPattern(ctor_pattern)
			return "CtorPattern(" + ctor_pattern + ")"
		CtorPatterns(ctor_patterns)
			return "CtorPatterns(" + ctor_patterns + ")"
		AllOf(t)
			return "AllOf(" + t + ")"
		Nothing
			return "Nothing"
		else
			assert(false)
			return "FAIL"
	
[global]
fn str(ctor_pattern CtorPatternValue) str
	args := ctor_pattern.args
	if len(args) == 0
		return ctor_pattern.name
	return ctor_pattern.name + "(" + args + ")"
	
type Sender = fn (pattern Pattern) void

fn set_difference(lhs CtorPatternValue, rhs CtorPatternValue, send Sender)
	assert(lhs.typename == rhs.typename)
	assert(len(rhs.args) == len(lhs.args))

	if lhs.name != rhs.name
		send(CtorPattern(lhs))
	elif len(lhs.args) == 0
		send(Nothing)
	else
		for i in range(len(lhs.args))
			send_ctor_pattern := fn (arg Pattern)
				match arg
					Nothing
						send(Nothing)
					else
						args := copy(lhs.args)
						args[i] = arg
						send(CtorPattern(CtorPatternValue(lhs.typename, lhs.name, args)))

			set_difference(lhs.args[i], rhs.args[i], send_ctor_pattern)
					
	
fn set_difference(lhs Pattern, rhs Pattern, send Sender) void
	# Set difference on patterns
	match Pair(lhs, rhs)
		Pair(_, Nothing)
			# Identity
			send(lhs)

		Pair(Nothing, _)
			# Unit
			send(Nothing)

		Pair(AllOf(DataType(typename2, _)), AllOf(DataType(typename1, _)))
			if typename1 == typename2
				send(Nothing)
			else
				panic("Type mismatch.")

		Pair(AllOf(_), AllOf(_))
			panic("Type mismatch.")

		Pair(_, AllOf(t))
			set_difference(lhs, pattern_from_type(t), send)

		Pair(AllOf(t), _)
			set_difference(pattern_from_type(t), rhs, send)

		Pair(CtorPatterns(lhs), CtorPatterns(_))
			# Iterate over all the initial patterns
			for a in lhs
				set_difference(CtorPattern(a), rhs, send)

		Pair(CtorPattern(lhs), CtorPatterns(rhs))
			# Make a state machine to compose the difference per sub-pattern
			new_a := MutableValue(Nothing)
			new_a_send := fn (p Pattern)
				new_a.value = set_union(new_a.value, p)

			# Simplify a bit
			new_a.value = CtorPattern(lhs)

			# Iterate over all the things to subtract
			for b in rhs
				# compose...
				current_a := new_a.value
				new_a.value = Nothing

				# Compute the difference at this level, and join it 
				set_difference(current_a, CtorPattern(b), new_a_send)

			send(new_a.value)

		Pair(CtorPatterns(lhs), CtorPattern(rhs))
			for a in lhs
				set_difference(a, rhs, send)

		Pair(CtorPatterns(_), _)
			panic("Type mismatch. " + lhs + " != " + rhs)

		Pair(_, CtorPatterns(_))
			panic("Type mismatch. " + lhs + " != " + rhs)

		Pair(CtorPattern(lhs), CtorPattern(rhs))
			set_difference(lhs, rhs, send)

		else
			panic("Unmatched Pair(" + lhs + ", " + rhs + ")")

fn set_difference(lhs Pattern, rhs Pattern) Pattern
	difference := MutableValue(Nothing)

	send := fn (p Pattern)
		difference.value = set_union(p, difference.value)

	set_difference(lhs, rhs, send)
	return difference.value

fn main()
	empty_types := new [DataType]
	Bool := DataType("Bool", [Ctor("True", empty_types), Ctor("False", empty_types)])
	Brightness := DataType("Brightness", [
		Ctor("High", empty_types),
		Ctor("Medium", empty_types),
		Ctor("Low", empty_types),
	])

	Color := DataType("Color", [
		Ctor("Red", [Brightness]),
		Ctor("Green", [Brightness]),
		Ctor("Blue", [Brightness]),
	])

	Pair := DataType("Pair", [Ctor("Pair", [Bool, Bool])])
	ColorPair := DataType("ColorPair", [Ctor("ColorPair", [Color, Color])])

	empty_patterns := new [Pattern]
	True := CtorPatternValue("Bool", "True", empty_patterns)
	False := CtorPatternValue("Bool", "False", empty_patterns)
	bool_pattern := AllOf(Bool)
	true_pattern := CtorPattern(True)

	start := CtorPattern(CtorPatternValue("ColorPair", "ColorPair", [AllOf(Color), AllOf(Color)]))
	cover := CtorPattern(
			CtorPatternValue("ColorPair", "ColorPair", [
				AllOf(Color),
				CtorPattern(CtorPatternValue("Color", "Red", [CtorPattern(CtorPatternValue("Brightness", "High", empty_patterns))]))]))

	uncovered := set_difference(start, cover)
	print("uncovered = " + uncovered)
	print("covered = " + cover)
	cover2 := CtorPattern(
			CtorPatternValue("ColorPair", "ColorPair", [
				CtorPattern(CtorPatternValue("Color", "Red", [CtorPattern(CtorPatternValue("Brightness", "High", empty_patterns))])),
				CtorPattern(CtorPatternValue("Color", "Red", [CtorPattern(CtorPatternValue("Brightness", "High", empty_patterns))]))]))
	print("cover2 = " + cover2)
	print(set_intersect(uncovered,  cover2))
