import matrix {V2, Transform2D, transform2d}
import svg {ToSvg, to_svg, inline_styles}

newtype Circle = Circle(V2, Float)
newtype Segment = Segment(V2, V2)
newtype Text = Text(V2, String)

fn segments_intersect(s1 Segment, s2 Segment) Maybe V2  {
  let Segment(V2(p0_x, p0_y), V2(p1_x, p1_y)) = s1
  let Segment(V2(p2_x, p2_y), V2(p3_x, p3_y)) = s2

  let s1_x = p1_x - p0_x
  let s1_y = p1_y - p0_y
  let s2_x = p3_x - p2_x
  let s2_y = p3_y - p2_y

  let s = (-s1_y * (p0_x - p2_x) + s1_x * (p0_y - p2_y)) / (-s2_x * s1_y + s1_x * s2_y)
  let t = ( s2_x * (p0_y - p2_y) - s2_y * (p0_x - p2_x)) / (-s2_x * s1_y + s1_x * s2_y)

  if s >= 0.0 and s <= 1.0 and t >= 0.0 and t <= 1.0 {
    # Collision detected
    return Just(V2(p0_x + (t * s1_x), p0_y + (t * s1_y)))
  }

  return Nothing
}

fn midpoint(s Segment) => match s {
  Segment(V2(x1, y1), V2(x2, y2)) => V2((x1 + x2) * 0.5,
                                        (y1 + y2) * 0.5)
}

instance Transform2D Segment {
  fn transform2d(s Segment, m3) Segment => match s {
    Segment(p1, p2) => Segment(transform2d(p1, m3), transform2d(p2, m3))
  }
}

instance Str Segment {
  fn str(s) => match s {
    Segment(p1, p2) => "Segment(${p1}, ${p2})"
  }
}

instance ToSvg Segment {
  fn to_svg(s, options) String {
    let Segment(V2(p0_x, p0_y), V2(p1_x, p1_y)) = s
    # TODO: utilize an xml_quote function
    return "<line x1='${p0_x}' y1='${p0_y}' x2='${p1_x}' y2='${p1_y}' ${inline_styles(options)} />"
  }
}


instance ToSvg Circle {
  fn to_svg(c, options) String {
    let Circle(V2(x, y), radius) = c
    return "<circle cx='${x}' cy='${y}' r='${radius}' ${inline_styles(options)}/>\n"
  }
}

instance ToSvg Text {
  fn to_svg(t, options) String {
    let Text(V2(x, y), text) = t
    return "<text cx='${x}' cy='${y}' ${inline_styles(options)}>${text}</text>\n"
  }
}
