import copy {copy}
import vector {without_index}

# Simple backtracking algorithm with basic pruning upon rejected nodes or
# accepted nodes.
class Backtrackable candidate {
  has Iterable candidate candidate
  fn reject(candidate) Bool
  fn accept(candidate) Bool
  fn output(candidate) ()
}

fn backtrack(candidate) {
  if reject(candidate) {
    return
  }
  if accept(candidate) {
    output(candidate)
    return
  }
  for s in candidate {
    backtrack(s)
  }
}

fn permuting_appender(ctor fn ([a], [a]) b, left [a], solution [a]) fn () Maybe b {
  var i = -1
  let ll = left.len
  return fn () Maybe b {
    i += 1
    if i < ll {
      let new_solution = solution.copy
      new_solution.append(left[i])
      return Just(ctor(left.without_index(i), new_solution))
    } else {
      return Nothing
    }
  }
}

fn unique_permuting_appender(ctor fn ([a], [a]) b, left [a], solution [a]) fn () Maybe b {
  var i = -1
  let left_set = new Set a
  let ll = left.len
  return fn () Maybe b {
    i += 1
    while i < ll {
      let cur_item = left[i]
      if cur_item in left_set {
        i += 1
        continue
      }

      left_set.insert(cur_item)

      let new_solution = solution.copy
      new_solution.append(left[i])
      return Just(ctor(left.without_index(i), new_solution))
    }
    return Nothing
  }
}
