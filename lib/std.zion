import result {Result, Ok, Err}
import defaults {HasDefault, HasDefaultGet, new, get}
import maybe {Maybe, Nothing, Just}
import map {Map, keys, values}
import math {+, -, *, /, abs, negate, Num, Bounded, from_int}
import set {Set, set}
import sys {open, read, write, close, readlines, stdin, stdout, stderr}
import vector {Vector, flatten, reserve, vector, reset, resize, append}
import string {String, split, chomp, strip, concat, has_substring, has_prefix, has_suffix,
               replace, join}

export {HasDefault, HasDefaultGet, new, get}
export {Maybe, Nothing, Just}
export {open, read, write, close, readlines, stdin, stdout, stderr}
export {Map, keys, values, Set, set}
export {+, -, *, /, abs, negate, Num, Bounded, from_int}
export {Vector, flatten, reserve, vector, reset, resize, make, Makeable}
export {String, split, chomp, strip, concat, has_substring, has_prefix, has_suffix, replace,
        join, append}
export {Result, Ok, Err}
export {u8, i8}

link pkg "bdw-gc"

data Bool {
  False
  True
}

fn not(x Bool) {
  if x {
    return False
  } else {
    return True
  }
}

fn i8(x) Int8 => int(x) as! Int8
fn u8(x) UInt8 => int(x) as! UInt8

instance HasDefault Int {
  fn new() => 0
}

class Repr a {
  fn repr(a) String
}

class Str a {
  fn str(a) String
}

instance Str Bool {
  fn str(b) => match b {
    True => "True"
    False => "False"
  }
}

instance Repr Bool {
  repr = str
}

instance Str () {
  fn str(a) => "()"
}

instance Repr () {
  fn repr(a) => "()"
}

fn strlen(sz *Char) Int => __builtin_ffi_1("zion_strlen", sz)

instance Str Int {
  fn str(x Int) {
    let sz = __builtin_ffi_1("zion_itoa", x)
    return String(sz, strlen(sz))
  }
}

instance Repr Int {
  repr = str
}

instance Str Int8 {
  fn str(x) => str(x as! Int)
}

instance Str UInt8 {
  fn str(x) => str(x as! Int)
}

instance Str Float {
  fn str(x) {
    let sz = __builtin_ffi_1("zion_ftoa", x)
    let length = __builtin_ffi_1("zion_strlen", sz)
    return String(sz, length)
  }
}

instance Repr Float {
  repr = str
}

instance Str (var a) {
  fn str(var a) => str(a)
}

instance Str (* Char) {
  fn str(a) => String(a, __builtin_ffi_1("zion_strlen", a))
}

instance Str [a] {
  fn str(xs) {
    let strs = []
    for x in xs {
      append(strs, str(x))
    }
    return "[${join(", ", strs)}]"
  }
}

fn putch(ch Char) () {
  (__builtin_ffi_2("zion_write_char", 1, ch) as Int)!
}

fn print(x) () {
  let String(sz, length) = "${x}\n"
  (__builtin_ffi_3("write", 1, sz, length) as Int)!
}

data Ref a {
  Ref(a)
}


class LoadableValue f {
  fn load_value(f a) a
}

class StorableValue g {
  fn store_value(g q, q) ()
}

instance LoadableValue Ref {
  fn load_value(a) {
    let Ref(x) = a
    return x
  }
}

instance StorableValue Ref {
  fn store_value(ra Ref a, a a) () {
    __builtin_store_ref(ra, a)
  }
}

instance LoadableValue * {
  fn load_value(a) => __builtin_ptr_load(a)
}

class Eq a {
  fn ==(a, a) Bool
  fn !=(a, a) Bool
  default {
    fn ==(a, b) => not (a != b)
    fn !=(a, b) => not (a == b)
  }
}

instance Eq (*a) {
  fn ==(a, b) => __builtin_ptr_eq(a, b)
  fn !=(a, b) => __builtin_ptr_ne(a, b)
}

instance Eq Int {
  fn ==(a, b) => __builtin_int_eq(a, b)
  fn !=(a, b) => __builtin_int_ne(a, b)
}

instance Eq Float {
  fn ==(a, b) => __builtin_float_eq(a, b)
  fn !=(a, b) => __builtin_float_ne(a, b)
}

instance Eq Char {
  fn ==(a, b) => __builtin_char_eq(a, b)
  fn !=(a, b) => __builtin_char_ne(a, b)
}

class Bitwise a {
  fn &(a, a) a
  fn |(a, a) a
  fn ^(a, a) a
}

instance Bitwise Int {
  fn &(a, b) => __builtin_int_bitwise_and(a, b)
  fn |(a, b) => __builtin_int_bitwise_or(a, b)
  fn ^(a, b) => __builtin_int_bitwise_xor(a, b)
}

data Ordering {
  EQ
  LT
  GT
}

instance Str Ordering {
  fn str(o) => match o {
    EQ => "EQ"
    LT => "LT"
    GT => "GT"
  }
}

instance Eq Ordering {
  fn ==(a, b) => match (a, b) {
    (EQ, EQ) => True
    (LT, LT) => True
    (GT, GT) => True
    _ => False
  }
}

class Ord a {
  fn compare(a, a) Ordering
  fn <(a, a) Bool
  fn <=(a, a) Bool
  fn >(a, a) Bool
  fn >=(a, a) Bool
  fn min(a, a) a
  fn max(a, a) a
  default {
    # Normal Ord can be completed by implementing just <= in your instance
    # fn <=(a, b)
    fn <(a, b) => not b <= a
    fn >(a, b) => not a <= b
    fn >=(a, b) => b <= a
    fn min(a, b) => a <= b ? a : b
    fn max(a, b) => a <= b ? b : a
    fn compare(a, b) => (a <= b) ? ((b <= a) ? EQ : LT) : GT
  }
}

instance Ord (a, b) {
    fn compare(a, b) Ordering {
        let (a1, a2) = a
        let (b1, b2) = b
        let c = compare(a1, b1)
        if c is EQ {
            return compare(a2, b2)
        } else {
            return c
        }
    }
    fn <(a, b) Bool {
        let (a1, a2) = a
        let (b1, b2) = b
        if a1 < b1 {
            return True
        } else if a1 > b1 {
            return True
        } else {
            return a2 < b2
        }
    }

    fn <=(a, b) Bool {
        let (a1, a2) = a
        let (b1, b2) = b
        if a1 < b1 {
            return True
        } else if a1 > b1 {
            return False
        } else {
            return a2 <= b2
        }
    }
    fn >(a, b) Bool {
        let (a1, a2) = a
        let (b1, b2) = b
        if a1 > b1 {
            return True
        } else if a1 < b1 {
            return False
        } else {
            return a2 > b2
        }
    }
    fn >=(a, b) Bool {
        let (a1, a2) = a
        let (b1, b2) = b
        if a1 > b1 {
            return True
        } else if a1 < b1 {
            return False
        } else {
            return a2 >= b2
        }
    }
    fn min(a, b) {
        return a > b ? b : a
    }
    fn max(a, b) {
        return a > b ? a : b
    }
}

instance Ord Int {
    fn <(a, b) => __builtin_int_lt(a, b)
    fn <=(a, b) => __builtin_int_lte(a, b)
    fn >(a, b) => __builtin_int_gt(a, b)
    fn >=(a, b) => __builtin_int_gte(a, b)

    fn compare(a, b) {
        if a < b {
            return LT
        } else if b < a {
            return GT
        } else {
            return EQ
        }
    }

    fn min(a, b) {
        return (a < b) ? a : b
    }
    fn max(a, b) {
        return (a > b) ? a : b
    }
}


instance Ord Char {
    fn <(a, b) => __builtin_char_lt(a, b)
    fn <=(a, b) => __builtin_char_lte(a, b)
    fn >(a, b) => __builtin_char_gt(a, b)
    fn >=(a, b) => __builtin_char_gte(a, b)

    fn compare(a, b) {
        if a < b {
            return LT
        } else if b < a {
            return GT
        } else {
            return EQ
        }
    }
    fn min(a, b) {
        return (a < b) ? a : b
    }
    fn max(a, b) {
        return (a > b) ? a : b
    }
}

instance Ord Float {
    fn <(a, b) => __builtin_float_lt(a, b)
    fn <=(a, b) => __builtin_float_lte(a, b)
    fn >(a, b) => __builtin_float_gt(a, b)
    fn >=(a, b) => __builtin_float_gte(a, b)

    fn compare(a, b) {
        if a < b {
            return LT
        } else if b < a {
            return GT
        } else {
            return EQ
        }
    }
    fn min(a, b) {
        return (a < b) ? a : b
    }
    fn max(a, b) {
        return (a > b) ? a : b
    }
}

instance Num Int {
    from_int = id
    fn +(a, b) => __builtin_add_int(a, b)
    fn -(a, b) => __builtin_subtract_int(a, b)
    fn *(a, b) => __builtin_multiply_int(a, b)
    fn /(a, b) => __builtin_divide_int(a, b)
    fn negate(a) => __builtin_negate_int(a)
    fn abs(a) => __builtin_abs_int(a)
}

instance Num Char {
    fn from_int(a) => __builtin_int_to_char(a)
    fn +(a, b) => __builtin_add_char(a, b)
    fn -(a, b) => __builtin_subtract_char(a, b)
    fn *(a, b) => __builtin_multiply_char(a, b)
    fn /(a, b) => __builtin_divide_char(a, b)
    fn negate(a) => __builtin_negate_char(a)
    fn abs(a) => __builtin_abs_char(a)
}

instance Num Float {
    fn from_int(a) => __builtin_int_to_float(a)
    fn +(a, b) => __builtin_add_float(a, b)
    fn -(a, b) => __builtin_subtract_float(a, b)
    fn *(a, b) => __builtin_multiply_float(a, b)
    fn /(a, b) => __builtin_divide_float(a, b)
    fn negate(a) => __builtin_negate_float(a)
    fn abs(a) => __builtin_abs_float(a)
}

class ConvertibleToInt a {
    fn int(a) Int
}

instance ConvertibleToInt Int {
  int = id
}

instance ConvertibleToInt Char {
  fn int(a) Int {
    return __builtin_ffi_1("zion_char_to_int", a)
  }
}

instance ConvertibleToInt Float {
  fn int(a) Int {
    return __builtin_float_to_int(a)
  }
}

class ConvertibleToFloat a {
  fn float(a) Float
}

instance ConvertibleToFloat Int {
  fn float(a) => __builtin_ffi_1("zion_itof", a)
}

instance ConvertibleToFloat String {
  fn float(a) Float {
    let String(sz, n) = a
    return __builtin_ffi_2("zion_atof", sz, n)
  }
}

class Modular a {
  fn %(a, a) a
}

instance Modular Int {
    fn %(p, q) {
        return __builtin_mod_int(p, q)
    }
}

class Functor f {
    fn fmap(fn (a) b, f a) f b
}

data Either a b {
    Left(a)
    Right(b)
}

instance Str Char {
    fn str(ch) {
        let ys = __builtin_calloc(1)
        ys[0] = ch
        return String(ys, 1)
    }
}

class HasLength a {
    fn len(a) Int
}

instance HasLength [a] {
    fn len(v) {
        let Vector(_, var size, _) = v
        return size
    }
}

class HasCapacity a {
    fn cap(a) Int
}

instance HasCapacity [a] {
    fn cap(a) {
        let Vector(_, _, var capacity) = a
        return capacity
    }
}

fn alloc(count Int) *a {
    return __builtin_calloc(sizeof(a) * count)
}

class HasIndexableItems collection index value {
    fn get_indexed_item(collection, index) value
}

instance HasIndexableItems (* a) Int a {
    fn get_indexed_item(p, index) {
        return !__builtin_ptr_add(p, index)
    }
}

instance HasIndexableItems [a] Int a {
    fn get_indexed_item(vec Vector a, index Int) a {
        let Vector(var array, var size, _) = vec
        assert(size > index)
        assert(array != null)
        return array[index]
    }
}

class HasRemovableItems collection key {
    # Remove an item idempotently
    fn remove(collection, key) ()
}

class HasSetMembership collection value {
    fn in(value, collection) Bool
    fn not_in(value, collection) Bool
    default {
      fn in(value, collection) => not (value not in collection)
      fn not_in(value, collection) => not (value in collection)
    }
}

class HasInsertableItems collection value {
    fn insert(collection, value) ()
}

class HasAssignableIndexableItems collection index value {
    fn set_indexed_item(collection, index, value) ()
}

instance HasAssignableIndexableItems (* a) Int a {
    fn set_indexed_item(p *a, index Int, a) {
        __builtin_store_ptr(__builtin_ptr_add(p, index), a)
    }
}

instance HasAssignableIndexableItems (Vector a) Int a {
    fn set_indexed_item(v Vector a, index Int, a a) {
        let Vector(var array, _, _) = v
        array[index] = a
    }
}

instance Eq [a] {
    fn ==(xs, ys) {
        let Vector(var xs_array, var xs_size, _) = xs
        let Vector(var ys_array, var ys_size, _) = ys
        if xs_size != ys_size {
            return False
        }
        var i = 0
        while i < xs_size {
            if xs_array[i] != ys_array[i] {
                return False
            }
            i += 1
        }
        return True
    }
    fn !=(xs, ys) {
        let Vector(var xs_array, var xs_size, _) = xs
        let Vector(var ys_array, var ys_size, _) = ys
        if xs_size != ys_size {
            return True
        }
        var i = 0
        while i < xs_size {
            if xs_array[i] != ys_array[i] {
                return True
            }
            i += 1
        }
        return False
    }
}

class Iterable collection item {
    fn iter(collection) fn () Maybe item
}

instance Iterable (fn () Maybe a) a {
    iter = id
}

instance Iterable [a] a {
    fn iter(vec Vector a) {
        var index = -1
        return fn() {
            index += 1
            if index >= len(vec) {
                return Nothing
            } else {
                return Just(vec[index])
            }
        }
    }
}

fn isspace(ch Char) Bool {
    return __builtin_ffi_1("isspace", int(ch))
}

fn isdigit(ch Char) Bool {
    return __builtin_ffi_1("isdigit", int(ch))
}
  
fn isalpha(ch Char) Bool {
    return __builtin_ffi_1("isalpha", int(ch))
}

fn islower(ch Char) Bool {
    return __builtin_ffi_1("islower", int(ch))
}

fn isupper(ch Char) Bool {
    return __builtin_ffi_1("isupper", int(ch))
}

fn tolower(ch Char) Char {
    # Only good for ASCII as is.
    return __builtin_ffi_1("tolower", int(ch))
}

fn toupper(ch Char) Char {
    # Only good for ASCII as is.
    return __builtin_ffi_1("toupper", int(ch))
}

class CanSliceFrom collection sliced_collection  {
    fn get_slice_from(collection, Int) sliced_collection
}

class CanSliceFromTo collection sliced_collection {
    fn get_slice_from_to(collection, Int, Int) sliced_collection
}

instance CanSliceFrom [a] [a] {
    fn get_slice_from(xs, index) {
        return get_slice_from_to(xs, index, len(xs))
    }
}

instance CanSliceFromTo [a] [a] {
    fn get_slice_from_to(xs, index, lim) {
        let ys = []
        let len_xs = len(xs)
        var index = min(index, len_xs)
        var lim = min(lim, len_xs)

        if index < 0 or index >= len_xs {
            return ys
        }

        let new_len = lim - index
        if new_len <= 0 {
            return []
        }
        reserve(ys, lim-index)

        for i in [index..lim-1] {
            append(ys, xs[i])
        }
        return ys
    }
}

let unit = ()
fn id(x) => x

fn panic(x) {
    print(x)
    __builtin_ffi_1("exit", 1)
}

struct Range a {
    range_min a
    step_size a
    range_max a
}

instance Str (Range a) {
    fn str(r) {
        let Range(min, size, max) = r
        return "Range(${min}, ${size}, ${max})"
    }
}

fn range(max Int) {
    return Range(0, 1, max-1)
}

instance Iterable (Range a) a {
    fn iter(ri) {
        let Range(range_min, step, range_max) = ri
        var index = range_min
        if step > 0 {
            return fn () {
                let cur_index = index;
                if cur_index <= range_max {
                    index = cur_index + ri.step_size
                    return Just(cur_index)
                } else {
                    return Nothing
                }
            }
        } else {
            /* handle stepping negatively */ 
            return fn () {
                let cur_index = index;
                if cur_index >= range_max {
                    index = cur_index + ri.step_size
                    return Just(cur_index)
                } else {
                    return Nothing
                }
            }
        }
    }
}

fn compose(f, g) => fn (x) => f(g(x))

fn map(f fn (a) b, iterable) fn () Maybe b {
    let iterator = iter(iterable)
    return fn () => match iterator() {
        Just(x) => Just(f(x))
        Nothing => Nothing
    }
}

fn filter(f fn (a) Bool, xs_input) fn () Maybe a {
    let xs = iter(xs_input)
    return fn() {
        while match xs() {
            Just(a) {
                if f(a) {
                    return Just(a)
                }
            }
            Nothing { return Nothing }
        }
        /* TODO: make it so that we don't get a
         * "not all control paths return a value" */
        return Nothing
    }
}

fn enumerate(xs) fn () Maybe (Int, a) {
    var i = -1
    let iterator = iter(xs)
    return fn () {
       match iterator() {
           Just(x) {
               i += 1
               return Just((i, x))
           }
           Nothing {
               return Nothing
           }
       }
   }
}

# WithResources are expected by `with` blocks without `else` blocks. In other
# words, `with` blocks without follow-up `else` blocks cannot fail to provide
# the resource.
newtype WithResource resource = WithResource(resource, fn () ())

# `WithElseResource`s are expected by `with` blocks that have `else` blocks. The
# input to a `with` block can fail to acquire the resource, and thus pass
# control to the `else` block.
data WithElseResource resource error {
    ResourceAcquired(WithResource resource)
    ResourceFailure(error)
}

fn resource_acquired(resource, cleanup fn () ()) {
  return ResourceAcquired(WithResource(resource, cleanup))
}

newtype Buffer = Buffer(*Char, Int)
class Serializeable a {
  fn serialize(a) Buffer
}

instance Serializeable Buffer {
    serialize = id
}

fn __ptr_sub(p1 *Char, p2 *Char) Int {
  return (p1 as! Int) - (p2 as! Int)
}

class FoldFromLeft container elem initial {
  # Left fold
  fn foldl(fn (initial, elem) initial, container, initial) initial
}

fn all(pred, xs) Bool {
  for x in xs {
    if not pred(x) {
      return False
    }
  }
  return True
}

fn any(pred, xs) Bool {
  for x in xs {
    if pred(x) {
      return True
    }
  }
  return False
}
