import math {sqrt}

struct Complex {
   real Float
   imag Float
}

instance Num Complex {
    from_int = fn (a) => Complex(from_int(a), 0.0)
    fn +(a, b) {
        let Complex(w, x) = a
        let Complex(y, z) = b
        return Complex(w + y, x + z)
    }
    fn -(a, b) {
        let Complex(w, x) = a
        let Complex(y, z) = b
        return Complex(w - y, x - z)
    }
    fn *(a, b) {
        let Complex(w, x) = a
        let Complex(y, z) = b
        return Complex(w * y - x * z, w * z + x * y)
    }
    fn /(a, b) {
        # TODO: implement
        assert(False)
        return Complex(0.0, 0.0)
    }
    fn negate(a) {
        let Complex(u, v) = a
        return Complex(-u, -v)
    }
    fn abs(a) {
        let Complex(u, v) = a
        return Complex(sqrt(u * u + v * v), 0.0)
    }
}

instance Eq Complex {
    fn ==(a, b) {
        let Complex(x1, y1) = a
        let Complex(x2, y2) = b
        return x1 == x2 and y1 == y2
    }

    fn !=(a, b) {
        let Complex(x1, y1) = a
        let Complex(x2, y2) = b
        return x1 == x2 and y1 == y2
    }
}


