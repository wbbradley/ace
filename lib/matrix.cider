import math {Monoid}
import trigonometry {sin, cos}

newtype V2 = V2(Float, Float)

instance Str V2 {
  fn str(v) {
    let V2(x, y) = v
    return "V2(${x}, ${y})"
  }
}

instance Num V2 {
  fn from_int(i) => V2(float(i), 0.0)
  fn +(a, b) {
    let V2(x, y) = a
    let V2(p, q) = b
    return V2(x + p, y + q)
  }
  fn *(a, b) {
    panic("Undefined operation (V2 multiplication)")
    return a
  }
  fn -(a, b) {
    let V2(x, y) = a
    let V2(p, q) = b
    return V2(x - p, y - q)
  }
  fn /(a, b) {
    panic("Undefined operation (V2 division)")
    return a
  }
  fn abs(a) {
    panic("Undefined operation (V2 abs)")
    return a
  }
  fn negate(a) {
    let V2(x, y) = a
    return V2(-x, -y)
  }
}

newtype V3 = V3(Float, Float, Float)

instance Num V3 {
  fn from_int(i) => V3(float(i), 0.0, 0.0)
  fn +(a, b) {
    let V3(p, q, r) = a
    let V3(s, t, u) = b
    return V3(p + s, q + t, r + u)
  }
  fn *(a, b) {
    panic("Undefined operation (V3 multiplication)")
    return a
  }
  fn -(a, b) {
    let V3(p, q, r) = a
    let V3(s, t, u) = b
    return V3(p - s, q - t, r - u)
  }
  fn /(a, b) {
    panic("Undefined operation (V3 division)")
    return a
  }
  fn abs(a) {
    panic("Undefined operation (V3 abs)")
    return a
  }
  fn negate(a) {
    let V3(p, q, r) = a
    return V3(-p, -q, -r)
  }
}

instance Str V3 {
  fn str(v) {
    let V3(x, y, z) = v
    return "V2(${x}, ${y}, ${z})"
  }
}

struct Matrix3 {
  m1 Float
  m2 Float
  m3 Float
  m4 Float
  m5 Float
  m6 Float
  m7 Float
  m8 Float
  m9 Float
}

class Transform2D a {
  fn transform2d(a, Matrix3) a
}

instance Transform2D V2 {
  fn transform2d(a, b) => multiply_vec2(b, a)
}

instance Str Matrix3 {
  fn str(m) {
    let Matrix3(m1, m2, m3, m4, m5, m6, m7, m8, m9) = m
    return "{\n\t${m1} ${m2} ${m3}\n\t${m4} ${m5} ${m6}\n\t${m7} ${m8} ${m9}\n}"
  }
}

fn id_matrix3() {
  return Matrix3(1.0, 0.0, 0.0,
                 0.0, 1.0, 0.0,
                 0.0, 0.0, 1.0)
}

instance Monoid Matrix3 {
  fn identity() {
    return Matrix3(1.0, 0.0, 0.0,
                   0.0, 1.0, 0.0,
                   0.0, 0.0, 1.0)
  }
}

instance Num Matrix3 {
  fn from_int(n) {
    panic("Matrix3 from int!")
    return id_matrix3()
  }

  fn +(a, b) {
    let Matrix3(a1, a2, a3, a4, a5, a6, a7, a8, a9) = a
    let Matrix3(b1, b2, b3, b4, b5, b6, b7, b8, b9) = b
    return Matrix3(a1+b1, a2+b2, a3+b3, a4+b4, a5+b5, a6+b6, a7+b7, a8+b8, a9+b9)
  }

  fn *(s, t) {
    let Matrix3(a, b, c, d, e, f, g, h, i) = s
    let Matrix3(j, k, l, m, n, o, p, q, r) = t
    return Matrix3(
      a*j + b*m + c*p, a*k + b*n + c*q, a*l + b*o + c*r,
      d*j + e*m + f*p, d*k + e*n + f*q, d*l + e*o + f*r,
      g*j + h*m + i*p, g*k + h*n + i*q, g*l + h*o + i*r)
  }

  fn -(a, b) {
    let Matrix3(a1, a2, a3, a4, a5, a6, a7, a8, a9) = a
    let Matrix3(b1, b2, b3, b4, b5, b6, b7, b8, b9) = b
    return Matrix3(a1-b1, a2-b2, a3-b3, a4-b4, a5-b5, a6-b6, a7-b7, a8-b8, a9-b9)
  }
  fn /(a, b) {
    panic("TODO: Invert the LHS and multiply it times the RHS")
    return a
  }
  fn abs(a) {
    panic("No such thing as an absolute value of a Matrix3")
    return a
  }
  fn negate(a) {
    panic("No such thing as a negation of a Matrix3")
    return a
  }
}

fn translation2d(dx, dy) => Matrix3(1.0, 0.0, dx, 0.0, 1.0, dy, 0.0, 0.0, 1.0)
fn translation2d_vec2(v2) {
  let V2(dx, dy) = v2
  return Matrix3(1.0, 0.0, dx, 0.0, 1.0, dy, 0.0, 0.0, 1.0)
}
fn scale2d(sx, sy) => Matrix3(sx, 0.0, 0.0, 0.0, sy, 0.0, 0.0, 0.0, 1.0)
fn rotate2d(radians) {
  let cos_radians = cos(radians)
  let sin_radians = sin(radians)
  return Matrix3(cos_radians, -sin_radians, 0.0, sin_radians, cos_radians, 0.0, 0.0, 0.0, 1.0)
}

fn multiply_vec3(m Matrix3, v3 V3) {
  let Matrix3(a, b, c, d, e, f, g, h, i) = m
  let V3(x, y, z) = v3
  return V3(a*x + b*y + c*z,
            d*x + e*y + f*z,
            g*x + h*y + i*z)
}

fn multiply_vec2(m Matrix3, v2 V2) {
  # Assuming homogeneous coordinate = 1.
  let Matrix3(a, b, c, d, e, f, _, _, _) = m
  let V2(x, y) = v2
  return V2(a*x + b*y + c,
            d*x + e*y + f)
}

fn svg_matrix(m Matrix3) String {
  let Matrix3(a, b, c, d, e, f, g, h, i) = m
  assert(g == 0.0)
  assert(h == 0.0)
  assert(i == 1.0)
  return "matrix(${a}, ${d}, ${b}, ${e}, ${c}, ${f})"
}
