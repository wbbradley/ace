# Implements the default Map type in Zion

import list {List, Cons, Nil, remove_if}
import hash {hash}
export {Map, MapStorage, keys, values, from_pairs}

newtype MapKeyValueCell key value = MapKeyValueCell(Int, key, var value)
newtype MapStorage key value = MapStorage([List (MapKeyValueCell key value)])
newtype Map key value = Map(MapStorage key value, var Int)

fn str_tuple_show(key, value) => "${repr(key)}: ${value}"
fn repr_tuple_show(key, value) => "${repr(key)}: ${repr(value)}"

fn map_render(map, tuple_show) {
  let Map(MapStorage(storage), _) = map
  let results = []
  for match Cons(MapKeyValueCell(_, key, var value), var next) in storage {
    append(results, tuple_show(key, value))
    var next_list = next
    while match next_list {
      Cons(MapKeyValueCell(_, key, var value), var next_next) {
        append(results, tuple_show(key, value))
        next_list = next_next
      }
      Nil {
        break
      }
    }
  }
  return "{${join(", ", results)}}"
}

instance Str (Map key value) {
  fn str(map) => map_render(map, str_tuple_show)
}

instance Repr (Map key value) {
  fn repr(map) => map_render(map, repr_tuple_show)
}

instance HasSetMembership (Map key value) key {
  fn in(key, map) Bool {
    let Map(map_storage, var size) = map
    return match find_key_value(map_storage, abs(hash(key)), key) {
      Just(_) => True
      Nothing => False
    }
  }
  fn not_in(key, map) Bool {
    return not (key in map)
  }
}

instance Str (MapKeyValueCell key value) {
  fn str(key_value_cell) String {
    let MapKeyValueCell(hash_value, key, var value) = key_value_cell
    return "MapKeyValueCell(${hash_value}, ${key}, ${value})"
  }
}

instance HasDefault (Map key value) {
  fn new() => Map(MapStorage([]), Ref(0))
}

instance HasLength (Map key value) {
  fn len(map) Int {
    let Map(_, var size) = map
    return size
  }
}

instance HasIndexableItems (Map key value) key (Maybe value) {
  fn get_indexed_item(map, key) {
    let Map(map_storage, var size) = map
    match find_key_value(map_storage, abs(hash(key)), key) {
      Just(MapKeyValueCell(_, _, var value)) {
        return Just(value)
      }
      Nothing { return Nothing }
    }
  }
}

instance HasIndexableItems (MapStorage key value) Int (List (MapKeyValueCell key value)) {
  fn get_indexed_item(map_storage, index) {
    let MapStorage(map_storage) = map_storage
    assert(len(map_storage) > index)
    return map_storage[index]
  }
}

instance HasRemovableItems (Map key value) key {
  fn remove(map, key) {
    let Map(map_storage@MapStorage(storage), var size) = map
    if size == 0 {
      return
    }
    let hash_key = abs(hash(key))
    let index = hash_key % len(storage)
    let (new_list, removed_count) = remove_if(storage[index], fn (key_value_cell MapKeyValueCell key value) Bool {
      let MapKeyValueCell(existing_key_hash, existing_key, _) = key_value_cell
      return existing_key_hash == hash_key and existing_key == key
    })
    map_storage[index] = new_list
    assert(size >= removed_count)
    size -= removed_count
  }
}

instance HasDefaultGet (Map key value) key value {
  fn get(m, k, d) => match m[k] {
    Just(a) => a
    Nothing => d
  }
}

instance Iterable (Map key value) (key, value) {
  fn iter(map) {
    let Map(MapStorage(storage), var size) = map
    let results = [] as [(key, value)]
    reserve(results, size)
    for match Cons(MapKeyValueCell(_, key, var value), var next) in storage {
      append(results, (key, value))
      var next_list = next
      while match next_list {
        Cons(MapKeyValueCell(_, key, var value), var next_next) {
          append(results, (key, value))
          next_list = next_next
        }
        Nil {
          break
        }
      }
    }
    return iter(results)
  }
}

fn find_key_value(map_storage MapStorage key value,
                  map_key_hash Int,
                  key key) Maybe (MapKeyValueCell key value) {
  let MapStorage(storage) = map_storage
  if len(storage) == 0 {
    return Nothing
  }

  let index = map_key_hash % len(storage)
  for mkvc@MapKeyValueCell(key_hash, existing_key, ss) in storage[index] {
    if key_hash == map_key_hash and existing_key == key {
      return Just(mkvc)
    }
  }
  return Nothing
}

fn needs_to_grow(map) {
  let Map(MapStorage(storage), var size) = map
  return size + 1 > len(storage)
}

fn grow_storage(map_storage MapStorage key value, new_size) {
  let MapStorage(storage) = map_storage
  assert(len(storage) < new_size)
  let new_storage = []
  reserve(new_storage, new_size)
  for i in [0..new_size-1] {
    append(new_storage, Nil)
  }
  assert(len(new_storage) == new_size)
  for key_value_cell_list in storage {
    for key_value_cell in key_value_cell_list {
      let MapKeyValueCell(key_hash, key, var value) = key_value_cell
      let index = key_hash % new_size
      new_storage[index] = Cons(key_value_cell, Ref(new_storage[index]))
    }
  }

  /* replace the existing storage with the newly allocated storage */
  let Vector(var array, var size, var capacity) = storage
  let Vector(var new_array, var new_size, var new_capacity) = new_storage
  array = new_array
  size = new_size
  capacity = new_capacity
}

instance HasAssignableIndexableItems (MapStorage key value) Int (List (MapKeyValueCell key value)) {
    fn set_indexed_item(map_storage, index, bucket) {
        let MapStorage(map_storage) = map_storage
        map_storage[index] = bucket
    }
}

instance HasAssignableIndexableItems (Map key value) key value {
    # NB: instance predicates (aka requirements) are discovered during
    # specialization. So, "has Hashable key" is not necessary (or even
    # parsed correctly.)
    fn set_indexed_item(map Map key value, key key, value value) {
        # get access to the inside of the map
        let Map(map_storage, var size) = map
        # compute the given key's hash
        let map_key_hash = abs(hash(key))

        # See if this key already exists
        # otherwise, we'll need to deal with growing the storage.
        match find_key_value(map_storage, map_key_hash, key) {
            Just(MapKeyValueCell(_, _, var old_value)) {
                # It exists, so just update the value
                old_value = value
                return
            }
        } else {
            if needs_to_grow(map) {
                # We need to grow to efficently hold another element.
                grow_storage(map_storage, size == 0 ? 4 : size * 2)
            }
            let MapStorage(storage) = map_storage
            assert(len(storage) > 0)
            let index = map_key_hash % len(storage)
            let key_value_cell = MapKeyValueCell(map_key_hash, key, Ref(value))
            storage[index] = Cons(key_value_cell, Ref(storage[index]))
            size += 1
        }
    }
}

fn keys(map Map key value) [key] {
    # Returns a copy of the keys in a Vector
    let Map(MapStorage(storage), var size) = map
    let results = []
    reserve(results, size)
    for match Cons(MapKeyValueCell(_, key, _), var next) in storage {
        append(results, key)
        var next_list = next
        while match next_list {
            Cons(MapKeyValueCell(_, key, _), var next_next) {
                append(results, key)
                next_list = next_next
            }
            Nil {
                break
            }
        }
    }
    return results
}

fn values(map Map key value) [value] {
    # Returns a copy of the values in a Vector
    let Map(MapStorage(storage), var size) = map
    let results = [] as [value]
    reserve(results, size)
    for match Cons(MapKeyValueCell(_, _, var value), var next) in storage {
        append(results, value)
        var next_list = next
        while match next_list {
            Cons(MapKeyValueCell(_, _, var value), var next_next) {
                append(results, value)
                next_list = next_next
            }
            Nil {
                break
            }
        }
    }
    return results
}

fn from_pairs(xys) Map a b {
  let map = new Map a b
  for (x, y) in xys {
    map[x] = y
  }
  return map
}
