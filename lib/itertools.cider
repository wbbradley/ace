fn zip(xs, ys) {
  let iter_xs = iter(xs)
  let iter_ys = iter(ys)
  return fn () {
    if iter_xs() is Just(x) {
      if iter_ys() is Just(y) {
        return Just((x, y))
      }
    }
    return Nothing
  }
}

fn repeat(x) fn () Maybe a {
    let jx = Just(x)
    return fn () => jx
}

fn take(iterable, n) {
  let iterator = iter(iterable)
  var i = n
  return fn() {
    if i <= 0 {
      return Nothing
    }
    let val = iterator()
    match val {
      Just(x) {
        i = i - 1
        return val
      }
      Nothing {
        return Nothing
      }
    }
  }
}

fn takewhile(iterable, predicate) {
  let iterator = iter(iterable)
  return fn() {
    let val = iterator()
    match val {
      Just(x) {
        if predicate(x) {
          return val
        } else {
          return Nothing
        }
      }
      Nothing {
        return Nothing
      }
    }
  }
}

fn dropwhile(iterable, predicate) {
  let iterator = iter(iterable)
  var dropping = True
  return fn () {
    while dropping {
      match iterator() {
        val@Just(x) {
          if predicate(x) {
            continue
          } else {
            dropping = False
            return val
          }
        }
        Nothing {
          return Nothing
        }
      }
    }
    return iterator()
  }
}



fn cycle(xs_input) {
  var xs = Just(iter(xs_input))
  let recording = []
  var index = 0
  return fn () {
    if xs is Just(iterator) {
      match iterator() {
        step@Just(x) {
          append(recording, step)
          return step
        }
        Nothing {
          xs = Nothing
        }
      }
    }
    let num_recordings = len(recording)
    if index < num_recordings {
      let ret = recording[index]
      index = index + 1
      return ret
    } else if num_recordings == 0 {
      return Nothing
    } else {
      assert(index == num_recordings)
      index = 1
      return recording[0]
    }
  }
}

fn chain2(a, b) fn () Maybe a => _chain2_iters(iter(a), iter(b))

fn _chain2_iters(as fn () Maybe a, bs fn () Maybe a) fn () Maybe a {
  var outer_iter = iter([as, bs])
  var cur_iterable = outer_iter()
  return fn () {
    while cur_iterable is Just(iterable_nested) {
      let value = iterable_nested()
      if value is Just(_) {
        return value
      } else {
        cur_iterable = outer_iter()
      }
    }
    return Nothing
  }
}

fn take_pairs(xs) {
  let iterator = iter(xs)
  return || => match iterator() {
    Just(k) => match iterator() {
      Just(v) => Just((k, v))
      Nothing => Nothing
    }
    Nothing => Nothing
  }
}
