import bufio {BufferedFileIO}
export {
  get_args, FileDescriptor, File, open, close, unlink, read, stdin, stdout,
  stderr, Errno, get_errno, write, BufferedFileIO, readlines, CreateMode,
  O_RDONLY, O_WRONLY, O_RDWR, O_ACCMODE, O_CREAT, O_EXCL, O_NOCTTY, O_TRUNC,
  O_APPEND, O_NONBLOCK, S_IRWXU, S_IRUSR, S_IWUSR, S_IXUSR, S_IRWXG, S_IRGRP,
  S_IWGRP, S_IXGRP, S_IRWXO, S_IROTH, S_IWOTH, S_IXOTH}

link pkg "bdw-gc"

newtype FileDescriptor = FileDescriptor(Int)
newtype LineReader stream = LineReader(BufferedFileIO stream)

fn get_args() [String] {
  let argc = ffi zion_sys_argc() as Int
  let argv = ffi zion_sys_argv() as *(*Char)
  let args = []
  reserve(args, argc)
  var i = 0
  while i < argc {
    append(args, String(argv[i], strlen(argv[i])))
    i += 1
  }
  return args
}

fn readlines(stream) => LineReader(BufferedFileIO(stream))

instance Iterable (LineReader stream) String {
  # readlines.
  fn iter(line_reader LineReader stream) fn () Maybe String {
    # This whole thing is overly complex...
    let LineReader(bufio) = line_reader
    let chunk_iter = iter(bufio)
    var cur_chunk = Nothing as Maybe Buffer
    let working_spans = [] as [String]
    let concat_current_line = || Maybe String {
      if len(working_spans) != 0 {
        let ret = join("", working_spans)
        reset(working_spans)
        let len_ret = len(ret)
        if len_ret != 0 and ret[len_ret - 1] == '\r' {
          # HACKHACK: Strip trailing CR from lines
          return Just(ret[:len_ret - 1])
        }
        return Just(ret)
      } else {
        return Nothing
      }
    }
    let add_span = |buf *Char, span_start Int, span_end Int| {
      let cb = span_end - span_start
      if cb > 0 {
        append(
          working_spans,
          String(ffi GC_strndup(__builtin_ptr_add(buf, span_start), cb), cb))
      }
    }

    var span_start = 0
    var span_end = 0
    return || {
      while True {
        if cur_chunk is Nothing {
          cur_chunk = chunk_iter()
          span_start = 0
          span_end = 0
        }
        match cur_chunk {
          Nothing => return concat_current_line()
          Just(Buffer(buf, cb)) {
            /* scan for newline */
            while span_end < cb {
              if buf[span_end] == '\n' {
                span_end += 1
                add_span(buf, span_start, span_end)
                span_start = span_end
                if span_start >= cb {
                  /* Grab another chunk next time we get called */
                  cur_chunk = Nothing
                }
                return concat_current_line()
              } else {
                span_end += 1
              }
            }
            add_span(buf, span_start, span_end)
            cur_chunk = Nothing
          }
        }
      }
      return Nothing
    }
  }
}

let stdin = 0 as! FileDescriptor
let stdout = 1 as! FileDescriptor
let stderr = 2 as! FileDescriptor

instance Repr FileDescriptor {
    fn repr(fd) {
        let FileDescriptor(fd) = fd
        return repr(fd)
    }
}

newtype Errno = Errno(Int)

instance Str Errno {
    fn str(errno) {
        let Errno(errno) = errno
        let buffer = alloc(1024) as *Char
        let res = ffi zion_strerror(errno, buffer, 1024) as *Char
        return String(res, strlen(res))
    }
}

newtype OpenFlags = OpenFlags(Int)
let O_RDONLY   =  __host_int(O_RDONLY) as! OpenFlags  /* open for reading only */
let O_WRONLY   =  __host_int(O_WRONLY) as! OpenFlags  /* open for writing only */
let O_RDWR     =  __host_int(O_RDWR) as! OpenFlags  /* open for reading and writing */
let O_ACCMODE  =  __host_int(O_ACCMODE) as! OpenFlags  /* mask for above modes */
let O_CREAT    =  __host_int(O_CREAT) as! OpenFlags
let O_EXCL     =  __host_int(O_EXCL) as! OpenFlags
let O_NOCTTY   =  __host_int(O_NOCTTY) as! OpenFlags
let O_TRUNC    = __host_int(O_TRUNC) as! OpenFlags
let O_APPEND   = __host_int(O_APPEND) as! OpenFlags
let O_NONBLOCK = __host_int(O_NONBLOCK) as! OpenFlags


newtype CreateMode = CreateMode(Int)
let S_IRWXU = __host_int(S_IRWXU) as! CreateMode /* user (file owner) has read, write, and execute permission */
let S_IRUSR = __host_int(S_IRUSR) as! CreateMode /* user has read permission */
let S_IWUSR = __host_int(S_IWUSR) as! CreateMode /* user has write permission */
let S_IXUSR = __host_int(S_IXUSR) as! CreateMode /* user has execute permission */
let S_IRWXG = __host_int(S_IRWXG) as! CreateMode /* group has read, write, and execute permission */
let S_IRGRP = __host_int(S_IRGRP) as! CreateMode /* group has read permission */
let S_IWGRP = __host_int(S_IWGRP) as! CreateMode /* group has write permission */
let S_IXGRP = __host_int(S_IXGRP) as! CreateMode /* group has execute permission */
let S_IRWXO = __host_int(S_IRWXO) as! CreateMode /* others have read, write, and execute permission */
let S_IROTH = __host_int(S_IROTH) as! CreateMode /* others have read permission */
let S_IWOTH = __host_int(S_IWOTH) as! CreateMode /* others have write permission */
let S_IXOTH = __host_int(S_IXOTH) as! CreateMode /* others have execute permission */

fn create_mode_default() => S_IRUSR|S_IWUSR|S_IRGRP|S_IROTH

instance Bitwise OpenFlags {
    fn &(a, b) {
        let OpenFlags(a_) = a
        let OpenFlags(b_) = b
        return OpenFlags(__builtin_int_bitwise_and(a_, b_))
    }
    fn |(a, b) {
        let OpenFlags(a) = a
        let OpenFlags(b) = b
        return OpenFlags(__builtin_int_bitwise_or(a, b))
    }
    fn ^(a, b) {
        let OpenFlags(a) = a
        let OpenFlags(b) = b
        return OpenFlags(__builtin_int_bitwise_xor(a, b))
    }
}

instance Bitwise CreateMode {
    fn &(a, b) {
        let CreateMode(a_) = a
        let CreateMode(b_) = b
        return CreateMode(__builtin_int_bitwise_and(a_, b_))
    }
    fn |(a, b) {
        let CreateMode(a) = a
        let CreateMode(b) = b
        return CreateMode(__builtin_int_bitwise_or(a, b))
    }
    fn ^(a, b) {
        let CreateMode(a) = a
        let CreateMode(b) = b
        return CreateMode(__builtin_int_bitwise_xor(a, b))
    }
}

class FileOpen params error {
    fn open(params) WithElseResource FileDescriptor error
}

fn get_errno() {
    return Errno(ffi zion_errno())
}

newtype File = File(String, OpenFlags, CreateMode)

instance FileOpen File Errno {
    fn open(params) {
        let File(String(sz_filename, _), OpenFlags(flags), CreateMode(mode)) = params
        return match ffi zion_open(sz_filename, flags, mode) {
            -1 => ResourceFailure(get_errno())
            fd => ResourceAcquired(WithResource(FileDescriptor(fd), fn () {
                (ffi zion_close(fd) as Int)!
            }))
        }
    }
}

instance FileOpen (*Char) Errno {
    fn open(filename) => open(String(filename, strlen(filename)))
}

instance FileOpen String Errno {
    # The default file open for generic reads and writes
    fn open(filename) {
        return open(File(filename, O_RDWR|O_CREAT, create_mode_default()))
    }
}

fn unlink(filename String) Int {
    let String(filename, _) = filename
    return ffi zion_unlink(filename)
}

fn close(fd Int) Int {
    return ffi zion_close(fd)
}

fn creat(filename, mode CreateMode) Int {
    let String(filename, _) = filename
    let CreateMode(mode) = mode
    return ffi zion_creat(filename, mode)
}

class Readable a {
    fn read(a, *Char, Int) Errno
}

instance Readable FileDescriptor {
    fn read(fd FileDescriptor, buffer *Char, nbyte Int) Errno {
        let FileDescriptor(fd) = fd
        return ffi zion_read(fd, buffer, nbyte)
    }
}

# For now all writes are blocking
fn write(file, buffer) Either () Errno {
    let Buffer(pb, cb) = serialize(buffer)
    var cur = 0
    while cur < cb {
        match write_buffer(file, __builtin_ptr_add(pb, cur), cb - cur) {
            Right(errno) {
                return Right(errno)
            }
            Left(bytes_written) {
                cur += bytes_written
            }
        }
    }
    return Left()
}

class WriteBuffer file {
    fn write_buffer(file, *Char, Int) Either Int Errno
}

instance WriteBuffer FileDescriptor {
    fn write_buffer(fd, pb, cb) {
        let FileDescriptor(fd) = fd
        return match ffi zion_write(fd, pb, cb) {
            -1 => Right(Errno(ffi zion_errno()))
            cb => Left(cb)
        }
    }
}
