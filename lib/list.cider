import vector {FromVector, from_vector, reverse}

data List x {
  Cons(x, List x)
  Nil
}

class FromList f {
  fn from_list(List a) f a
}

instance FromList List {
  from_list = id
}

instance HasLength (List a) {
  fn len(list) {
    var p = list
    var i = 0
    while match p {
      Cons(_, next) {
        i += 1
        p = next
      }
      Nil => break
    }
    return i
  }
}

fn nth(l List x, index Int) Maybe x {
  var rl = l
  var i = 0
  while match rl {
    Cons(x, next) {
      if i == index {
        return Just(x)
      } else {
        rl = next
        i += 1
      }
    }
    Nil {
      break
    }
  }
  return Nothing
}

instance Iterable (List a) a {
  fn iter(list List a) {
    var list = list
    return fn () Maybe a {
      match list {
        Cons(x, next) {
          list = next
          return Just(x)
        }
        Nil {
          return Nothing
        }
      }
    }
  }
}

instance Str (List a) {
  fn str(list) {
    return join(", ", list)
  }
}

instance FromVector List {
  fn from_vector(xs) {
    var list = Nil
    for x in reverse(xs) {
      list = Cons(x, list)
    }
    return list
  }
}
