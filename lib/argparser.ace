import itertools {repeat}
import string {Strippable}
import parser {lift, sequence, Progress, OK, Fail}

# The immutable most-recent state of the parser, sans AST state
newtype ArgParseState = ArgParseState([String], Int)

# ArgSpan is a slice of the source args
struct ArgSpan {
  args [String]
  pos  Int
}

fn arg_span_concat(arg_spans [ArgSpan]) ArgSpan {
  return ArgSpan([arg_span.args for arg_span in arg_spans],
                 len(arg_spans) > 0 ? arg_spans[0].pos : 0)
}

instance Str ArgSpan {
  fn str(arg_span) => "${join(" ", arg_span.args)}"
}

fn parse_args(parser, args) WithElseResource opts String {
  if parser(ArgParseState(args, 0)) is OK(ArgParseState(_, pos), opts) {
    if pos != len(args) {
      return ResourceFailure("Failed to parse all args: ${args[pos:]} were not parsed")
    }

    return resource_acquired(opts, fn () {})
  } else {
    return ResourceFailure("Failed to parse args: ${args}")
  }
}

fn const(k String, value) fn (ArgParseState) Progress ArgParseState value {
  return lift(|_| => value, literal(k))
}

fn literal(k String) fn (ArgParseState) Progress ArgParseState ArgSpan {
  return fn (parse_state) {
    let ArgParseState(args, index) = parse_state
    if len(args) <= index {
      return Fail
    }
    return (
      args[index] == k
        ? OK(ArgParseState(args, index+1), ArgSpan(args[index:index+1], index))
        : Fail)
  }
}

fn term(parse_state ArgParseState) Progress ArgParseState ArgSpan {
  let ArgParseState(args, index) = parse_state
  if len(args) <= index {
    return Fail
  }
  return OK(ArgParseState(args, index+1), ArgSpan(args[index:index+1], index))
}

fn flag(flag_name, ctor) {
  return lift(
    |x| => ctor(str(x[1])),
    sequence([literal(flag_name), term]))
}
